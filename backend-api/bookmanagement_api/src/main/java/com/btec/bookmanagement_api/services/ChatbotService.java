package com.btec.bookmanagement_api.services;

import com.btec.bookmanagement_api.entities.Book;
import com.btec.bookmanagement_api.entities.Category;
import com.btec.bookmanagement_api.entities.Chapter;
import com.btec.bookmanagement_api.entities.User;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ChatbotService {

    private final OpenAiService openAiService;
    private final BookService bookService;
    private final FollowBookService followBookService;
    private final ChapterService chapterService;

    // ‚úÖ 1. G·ª£i √Ω truy·ªán b·∫±ng AI d·ª±a theo ng∆∞·ªùi d√πng
    public String recommendBookByAI(User user, String userInput) {
        String prompt = buildStructuredRecommendationPrompt(userInput);
        return openAiService.getRecommendation(prompt);
    }

    // ‚úÖ 2. T√≥m t·∫Øt truy·ªán
    public String summarizeBook(Book book) {
        String prompt = "H√£y t√≥m t·∫Øt truy·ªán c√≥ ti√™u ƒë·ªÅ \"" + book.getTitle() +
                "\" v·ªõi m√¥ t·∫£: " + book.getDescription();
        return openAiService.getRecommendation(prompt);
    }

    // ‚úÖ 3. Chat h·ªèi AI t·ªïng qu√°t
    public String chatWithAI(User user, String message) {
        String prompt = "B·∫°n l√† m·ªôt AI h·ªó tr·ª£ ng∆∞·ªùi ƒë·ªçc truy·ªán. Ng∆∞·ªùi d√πng h·ªèi: " + message;
        return openAiService.getRecommendation(prompt);
    }

    // üîß H√†m ph·ª• tr·ª£ ƒë·ªÉ t·∫°o prompt c√° nh√¢n h√≥a t·ª´ danh s√°ch truy·ªán

    private String buildStructuredRecommendationPrompt(String userInput) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("B·∫°n l√† m·ªôt AI g·ª£i √Ω truy·ªán cho ng∆∞·ªùi d√πng d·ª±a tr√™n s·ªü th√≠ch.\n");
        prompt.append("Ph√¢n t√≠ch danh s√°ch truy·ªán sau v√† g·ª£i √Ω t·ª´ 1 ƒë·∫øn 3 truy·ªán ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.\n");
        prompt.append("Quan tr·ªçng: Tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng m·∫£ng JSON v·ªõi c√°c thu·ªôc t√≠nh: id, title, description, categories (m·∫£ng).\n");
        prompt.append("Kh√¥ng c·∫ßn gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ JSON duy nh·∫•t.\n\n");

        List<Book> allBooks = bookService.getAllBooks();
        prompt.append("üìö Danh s√°ch truy·ªán:\n");

        for (Book book : allBooks) {
            prompt.append("{\n");
            prompt.append("  \"id\": \"").append(book.getId()).append("\",\n");
            prompt.append("  \"title\": \"").append(book.getTitle()).append("\",\n");
            prompt.append("  \"description\": \"").append(book.getDescription() != null ? book.getDescription().replace("\"", "'") : "").append("\",\n");
            prompt.append("  \"categories\": [");

            List<Category> categories = book.getCategories();
            if (categories != null && !categories.isEmpty()) {
                String cats = categories.stream()
                        .map(cat -> "\"" + cat.getName() + "\"")
                        .collect(Collectors.joining(", "));
                prompt.append(cats);
            }

            prompt.append("]\n},\n");
        }

        prompt.append("\nüéØ Y√™u c·∫ßu ng∆∞·ªùi d√πng: ").append(userInput).append("\n");
        prompt.append("‚Üí Tr·∫£ k·∫øt qu·∫£ l√† JSON duy nh·∫•t, kh√¥ng c√≥ gi·∫£i th√≠ch, kh√¥ng text ngo√†i l·ªÅ.\n");

        return prompt.toString();
    }


    private int countChaptersByBookId(String bookId) {
        // Gi·∫£ s·ª≠ b·∫°n c√≥ ChapterService
        List<Chapter> chapters = chapterService.findByBookId(bookId);
        return chapters != null ? chapters.size() : 0;
    }




}

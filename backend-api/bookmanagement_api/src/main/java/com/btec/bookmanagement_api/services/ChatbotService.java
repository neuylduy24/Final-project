package com.btec.bookmanagement_api.services;

import com.btec.bookmanagement_api.entities.Book;
import com.btec.bookmanagement_api.entities.Category;
import com.btec.bookmanagement_api.entities.Chapter;
import com.btec.bookmanagement_api.entities.User;
import com.btec.bookmanagement_api.entities.Feedback;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ChatbotService {

    private final GeminiService geminiService; // Change to GeminiService
    private final BookService bookService;
    private final FollowBookService followBookService;
    private final ChapterService chapterService;
    private final CategoryService categoryService;
    private final ReadingHistoryService readingHistoryService;
    private final FeedbackService feedbackService;

    // ‚úÖ 1. G·ª£i √Ω truy·ªán b·∫±ng AI d·ª±a theo ng∆∞·ªùi d√πng
    public String recommendBookByAI(User user, String userInput) {
        String prompt = buildStructuredRecommendationPrompt(userInput);
        return geminiService.getRecommendation(prompt); // Use geminiService
    }

    // ‚úÖ 2. T√≥m t·∫Øt truy·ªán
    public String summarizeBook(Book book) {
        String prompt = "H√£y t√≥m t·∫Øt truy·ªán c√≥ ti√™u ƒë·ªÅ \"" + book.getTitle() +
                "\" v·ªõi m√¥ t·∫£: " + book.getDescription();
        return geminiService.getRecommendation(prompt); // Use geminiService
    }

    // ‚úÖ 3. Chat h·ªèi AI t·ªïng qu√°t
    public String chatWithAI(User user, String message) {
        String prompt = "B·∫°n l√† m·ªôt AI h·ªó tr·ª£ ng∆∞·ªùi ƒë·ªçc truy·ªán. Ng∆∞·ªùi d√πng h·ªèi: " + message;
        return geminiService.getRecommendation(prompt); // Use geminiService
    }

    // üîß H√†m ph·ª• tr·ª£ ƒë·ªÉ t·∫°o prompt c√° nh√¢n h√≥a t·ª´ danh s√°ch truy·ªán

    private String buildStructuredRecommendationPrompt(String userInput) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("B·∫°n l√† m·ªôt AI g·ª£i √Ω truy·ªán cho ng∆∞·ªùi d√πng d·ª±a tr√™n s·ªü th√≠ch.\n");
        prompt.append("Ph√¢n t√≠ch danh s√°ch truy·ªán sau v√† g·ª£i √Ω t·ª´ 1 ƒë·∫øn 3 truy·ªán ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.\n");
        prompt.append("Quan tr·ªçng: Tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng m·∫£ng JSON v·ªõi c√°c thu·ªôc t√≠nh: id, title, description, categories (m·∫£ng).\n");
        prompt.append("Kh√¥ng c·∫ßn gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ JSON duy nh·∫•t.\n\n");

        List<Book> allBooks = bookService.getAllBooks();
        prompt.append("üìö Danh s√°ch truy·ªán:\n");

        for (Book book : allBooks) {
            prompt.append("{\n");
            prompt.append("  \"id\": \"").append(book.getId()).append("\",\n");
            prompt.append("  \"title\": \"").append(book.getTitle()).append("\",\n");
            prompt.append("  \"description\": \"").append(book.getDescription() != null ? book.getDescription().replace("\"", "'") : "").append("\",\n");
            prompt.append("  \"categories\": [");

            List<Category> categories = book.getCategories();
            if (categories != null && !categories.isEmpty()) {
                String cats = categories.stream()
                        .map(cat -> "\"" + cat.getName() + "\"")
                        .collect(Collectors.joining(", "));
                prompt.append(cats);
            }

            prompt.append("]\n},\n");
        }

        prompt.append("\nüéØ Y√™u c·∫ßu ng∆∞·ªùi d√πng: ").append(userInput).append("\n");
        prompt.append("‚Üí Tr·∫£ k·∫øt qu·∫£ l√† JSON duy nh·∫•t, kh√¥ng c√≥ gi·∫£i th√≠ch, kh√¥ng text ngo√†i l·ªÅ.\n");

        return prompt.toString();
    }

    private int countChaptersByBookId(String bookId) {
        // Gi·∫£ s·ª≠ b·∫°n c√≥ ChapterService
        List<Chapter> chapters = chapterService.findByBookId(bookId);
        return chapters != null ? chapters.size() : 0;
    }

    public String answerProjectDataQuestion(String question) {
        // Get data relevant to the specific question
        Map<String, Object> relevantData = fetchRelevantData(question);
        StringBuilder contextBuilder = new StringBuilder();
        
        // Base statistics - always include
        List<Book> allBooks = bookService.getAllBooks();
        List<Category> categories = categoryService.getAllCategories();
        
        contextBuilder.append("Th√¥ng tin c∆° s·ªü d·ªØ li·ªáu: ")
                     .append(allBooks.size())
                     .append(" t·ªïng s·ªë s√°ch, ")
                     .append(categories.size())
                     .append(" th·ªÉ lo·∫°i: ")
                     .append(categories.stream()
                             .map(Category::getName)
                             .collect(Collectors.joining(", ")))
                     .append(".\n\n");
        
        // Book search results (when searching by title/keyword)
        if (relevantData.containsKey("searchResults")) {
            @SuppressWarnings("unchecked")
            List<Book> bookResults = (List<Book>) relevantData.get("searchResults");
            if (!bookResults.isEmpty()) {
                contextBuilder.append("K·∫øt qu·∫£ t√¨m ki·∫øm s√°ch:\n");
                bookResults.stream().limit(5).forEach(book -> {
                    contextBuilder.append("- Ti√™u ƒë·ªÅ: \"").append(book.getTitle()).append("\"\n");
                    contextBuilder.append("  T√°c gi·∫£: ").append(book.getAuthor() != null ? book.getAuthor() : "Kh√¥ng r√µ").append("\n");
                    
                    if (book.getCategories() != null && !book.getCategories().isEmpty()) {
                        contextBuilder.append("  Th·ªÉ lo·∫°i: ").append(
                            book.getCategories().stream()
                                .map(Category::getName)
                                .collect(Collectors.joining(", "))
                        ).append("\n");
                    }
                    
                    contextBuilder.append("  S·ªë ch∆∞∆°ng: ").append(countChaptersByBookId(book.getId())).append("\n");
                    contextBuilder.append("  L∆∞·ª£t xem: ").append(book.getViews()).append("\n\n");
                });
                
                if (bookResults.size() > 5) {
                    contextBuilder.append("... v√† ").append(bookResults.size() - 5).append(" s√°ch kh√°c\n\n");
                }
            }
        }
        
        // Category-specific books
        if (relevantData.containsKey("categoryBooks")) {
            @SuppressWarnings("unchecked")
            Map<String, List<Book>> booksByCategory = (Map<String, List<Book>>) relevantData.get("categoryBooks");
            
            if (!booksByCategory.isEmpty()) {
                contextBuilder.append("S√°ch theo th·ªÉ lo·∫°i:\n");
                booksByCategory.forEach((categoryName, books) -> {
                    contextBuilder.append("Th·ªÉ lo·∫°i \"").append(categoryName).append("\" (")
                                .append(books.size()).append(" s√°ch):\n");
                    
                    books.stream().limit(5).forEach(book -> 
                        contextBuilder.append("- \"").append(book.getTitle())
                                    .append("\" (").append(book.getViews()).append(" l∆∞·ª£t xem)\n")
                    );
                    
                    if (books.size() > 5) {
                        contextBuilder.append("  ... v√† ").append(books.size() - 5).append(" s√°ch kh√°c\n");
                    }
                    contextBuilder.append("\n");
                });
            }
        }
        
        // Chapter information
        if (relevantData.containsKey("chapters")) {
            @SuppressWarnings("unchecked")
            Map<String, List<Chapter>> chapterData = (Map<String, List<Chapter>>) relevantData.get("chapters");
            
            if (!chapterData.isEmpty()) {
                contextBuilder.append("Th√¥ng tin ch∆∞∆°ng s√°ch:\n");
                chapterData.forEach((bookTitle, chapters) -> {
                    contextBuilder.append("S√°ch \"").append(bookTitle).append("\" c√≥ ")
                                .append(chapters.size()).append(" ch∆∞∆°ng:\n");
                    
                    chapters.stream().limit(8).forEach(chapter -> 
                        contextBuilder.append("- Ch∆∞∆°ng ").append(chapter.getChapterNumber())
                                    .append(": \"").append(chapter.getTitle()).append("\"\n")
                    );
                    
                    if (chapters.size() > 8) {
                        contextBuilder.append("  ... v√† ").append(chapters.size() - 8).append(" ch∆∞∆°ng kh√°c\n");
                    }
                    contextBuilder.append("\n");
                });
            }
        }
        
        // Popular books
        if (relevantData.containsKey("popularBooks")) {
            @SuppressWarnings("unchecked")
            List<Book> popularBooks = (List<Book>) relevantData.get("popularBooks");
            
            if (!popularBooks.isEmpty()) {
                contextBuilder.append("S√°ch ph·ªï bi·∫øn nh·∫•t (theo l∆∞·ª£t xem):\n");
                for (int i = 0; i < Math.min(popularBooks.size(), 10); i++) {
                    Book book = popularBooks.get(i);
                    contextBuilder.append(i+1).append(". \"").append(book.getTitle())
                                .append("\" (").append(book.getViews()).append(" l∆∞·ª£t xem");
                    
                    if (book.getCategories() != null && !book.getCategories().isEmpty()) {
                        contextBuilder.append(", Th·ªÉ lo·∫°i: ").append(
                            book.getCategories().stream()
                                .map(Category::getName)
                                .collect(Collectors.joining(", "))
                        );
                    }
                    
                    contextBuilder.append(")\n");
                }
                contextBuilder.append("\n");
            }
        }
        
        // Recommended books
        if (relevantData.containsKey("recommendedBooks")) {
            @SuppressWarnings("unchecked")
            List<Book> recommendedBooks = (List<Book>) relevantData.get("recommendedBooks");
            
            if (!recommendedBooks.isEmpty()) {
                contextBuilder.append("ƒê·ªÅ xu·∫•t s√°ch ph√π h·ª£p v·ªõi y√™u c·∫ßu:\n");
                for (int i = 0; i < Math.min(recommendedBooks.size(), 5); i++) {
                    Book book = recommendedBooks.get(i);
                    contextBuilder.append(i+1).append(". \"").append(book.getTitle()).append("\"\n");
                    
                    if (book.getCategories() != null && !book.getCategories().isEmpty()) {
                        contextBuilder.append("   Th·ªÉ lo·∫°i: ").append(
                            book.getCategories().stream()
                                .map(Category::getName)
                                .collect(Collectors.joining(", "))
                        ).append("\n");
                    }
                    
                    if (book.getDescription() != null && !book.getDescription().isEmpty()) {
                        String desc = book.getDescription().length() > 100 ? 
                            book.getDescription().substring(0, 100) + "..." : 
                            book.getDescription();
                        contextBuilder.append("   M√¥ t·∫£: ").append(desc).append("\n");
                    }
                    
                    contextBuilder.append("   S·ªë ch∆∞∆°ng: ").append(countChaptersByBookId(book.getId())).append("\n\n");
                }
            }
        }
        
        // Final prompt for AI
        String prompt = "B·∫°n l√† tr·ª£ l√Ω AI cho h·ªá th·ªëng s√°ch. D·ª±a v√†o d·ªØ li·ªáu sau, h√£y tr·∫£ l·ªùi c√¢u h·ªèi:\n\n" +
                        contextBuilder.toString() + 
                        "\nC√¢u h·ªèi: \"" + question + "\"\n\n" +
                        "Tr·∫£ l·ªùi r√µ r√†ng, ƒë·∫ßy ƒë·ªß v√† th√¢n thi·ªán. N·∫øu b·∫°n g·ª£i √Ω s√°ch, gi·∫£i th√≠ch l√Ω do ƒë·ªÅ xu·∫•t.";
        
        return geminiService.getRecommendation(prompt);
    }

    private Map<String, Object> fetchRelevantData(String question) {
        Map<String, Object> data = new HashMap<>();
        String lowercaseQuestion = question.toLowerCase();
        
        // BOOK SEARCH QUERIES
        if (containsAny(lowercaseQuestion, "t√¨m s√°ch", "t√¨m truy·ªán", "s√°ch t√™n", "truy·ªán t√™n", "c√≥ s√°ch", "search book")) {
            String searchTerm = extractSearchTerm(question);
            if (!searchTerm.isEmpty()) {
                List<Book> results = bookService.searchBooksByTitle(searchTerm);
                if (!results.isEmpty()) {
                    data.put("searchResults", results);
                }
            }
        }
        
        // CATEGORY QUERIES
        if (containsAny(lowercaseQuestion, "th·ªÉ lo·∫°i", "ph√¢n lo·∫°i", "category", "genre", "lo·∫°i s√°ch")) {
            Map<String, List<Book>> booksByCategory = new HashMap<>();
            boolean specificCategoryFound = false;
            
            // Check for specific category mention
            for (Category category : categoryService.getAllCategories()) {
                if (lowercaseQuestion.contains(category.getName().toLowerCase())) {
                    List<Book> categoryBooks = getBooksByCategory(category.getId());
                    if (!categoryBooks.isEmpty()) {
                        booksByCategory.put(category.getName(), categoryBooks);
                        specificCategoryFound = true;
                    }
                }
            }
            
            // If no specific category found but asking about categories
            if (!specificCategoryFound && containsAny(lowercaseQuestion, "danh s√°ch", "list", "t·∫•t c·∫£", "all")) {
                for (Category category : categoryService.getAllCategories()) {
                    List<Book> categoryBooks = getBooksByCategory(category.getId());
                    if (!categoryBooks.isEmpty()) {
                        booksByCategory.put(category.getName(), categoryBooks);
                    }
                }
            }
            
            if (!booksByCategory.isEmpty()) {
                data.put("categoryBooks", booksByCategory);
            }
        }
        
        // CHAPTER QUERIES
        if (containsAny(lowercaseQuestion, "ch∆∞∆°ng", "chapter", "t·∫≠p", "ph·∫ßn")) {
            Map<String, List<Chapter>> bookChapters = new HashMap<>();
            boolean specificBookFound = false;
            
            // First check for a specific book mentioned
            for (Book book : bookService.getAllBooks()) {
                if (lowercaseQuestion.contains(book.getTitle().toLowerCase())) {
                    List<Chapter> chapters = chapterService.findByBookId(book.getId());
                    if (!chapters.isEmpty()) {
                        bookChapters.put(book.getTitle(), chapters);
                        specificBookFound = true;
                        break;
                    }
                }
            }
            
            // If asking about chapters but no specific book mentioned
            if (!specificBookFound) {
                List<Book> popularBooks = bookService.getBooksByViews();
                int booksToShow = Math.min(3, popularBooks.size());
                
                for (int i = 0; i < booksToShow; i++) {
                    Book book = popularBooks.get(i);
                    List<Chapter> chapters = chapterService.findByBookId(book.getId());
                    if (!chapters.isEmpty()) {
                        bookChapters.put(book.getTitle(), chapters);
                    }
                }
            }
            
            if (!bookChapters.isEmpty()) {
                data.put("chapters", bookChapters);
            }
        }
        
        // POPULAR BOOKS QUERIES
        if (containsAny(lowercaseQuestion, "ph·ªï bi·∫øn", "n·ªïi b·∫≠t", "xem nhi·ªÅu", "popular", "trending", "hot")) {
            data.put("popularBooks", bookService.getBooksByViews());
        }
        
        // RECOMMENDATION QUERIES
        if (containsAny(lowercaseQuestion, "g·ª£i √Ω", "ƒë·ªÅ xu·∫•t", "recommend", "suggest", "n√™n ƒë·ªçc", "hay nh·∫•t")) {
            List<Book> recommendedBooks = new ArrayList<>();
            boolean hasGenreCriteria = false;
            
            // Check for genre preferences
            for (Category category : categoryService.getAllCategories()) {
                if (lowercaseQuestion.contains(category.getName().toLowerCase())) {
                    recommendedBooks.addAll(getBooksByCategory(category.getId()));
                    hasGenreCriteria = true;
                }
            }
            
            // If no specific genre mentioned, recommend popular books
            if (!hasGenreCriteria) {
                recommendedBooks.addAll(bookService.getBooksByViews());
            }
            
            // Sort by view count
            if (!recommendedBooks.isEmpty()) {
                recommendedBooks.sort((b1, b2) -> b2.getViews() - b1.getViews());
                data.put("recommendedBooks", recommendedBooks.stream().distinct().collect(Collectors.toList()));
            }
        }
        
        return data;
    }

    // Get books by category ID - helper method
    private List<Book> getBooksByCategory(String categoryId) {
        // Get all books then filter by category
        List<Book> allBooks = bookService.getAllBooks();
        return allBooks.stream()
                .filter(book -> book.getCategories() != null && 
                        book.getCategories().stream()
                            .anyMatch(cat -> cat.getId().equals(categoryId)))
                .collect(Collectors.toList());
    }

    // Helper method to check if text contains any of the given phrases
    private boolean containsAny(String text, String... phrases) {
        for (String phrase : phrases) {
            if (text.contains(phrase)) {
                return true;
            }
        }
        return false;
    }

    // Helper method to extract the search term from a question
    private String extractSearchTerm(String question) {
        // Common patterns that might precede the search term
        String[] patterns = {
            "t√¨m s√°ch", "t√¨m truy·ªán", "s√°ch t√™n", "truy·ªán t√™n",
            "s√°ch c√≥ t√™n", "truy·ªán c√≥ t√™n", "t√™n s√°ch", "t√™n truy·ªán"
        };
        
        // Try to identify pattern and extract text after it
        for (String pattern : patterns) {
            if (question.toLowerCase().contains(pattern.toLowerCase())) {
                int patternIndex = question.toLowerCase().indexOf(pattern.toLowerCase());
                String remainder = question.substring(patternIndex + pattern.length()).trim();
                
                // Remove connecting words
                remainder = remainder.replaceFirst("^(l√†|nh∆∞|v·ªÅ|c√≥ t√™n l√†|c√≥ t√™n|t√™n l√†)\\s+", "");
                
                // If we have quotation marks, extract content between them
                if (remainder.contains("\"")) {
                    int startQuote = remainder.indexOf("\"");
                    int endQuote = remainder.indexOf("\"", startQuote + 1);
                    if (endQuote > startQuote) {
                        return remainder.substring(startQuote + 1, endQuote).trim();
                    }
                }
                
                // Otherwise take first few words
                String[] words = remainder.split("\\s+");
                StringBuilder term = new StringBuilder();
                for (int i = 0; i < Math.min(5, words.length); i++) {
                    if (words[i].matches(".*[?!.,;:]$")) {
                        term.append(words[i].replaceAll("[?!.,;:]$", "")).append(" ");
                        break;
                    }
                    term.append(words[i]).append(" ");
                }
                
                return term.toString().trim();
            }
        }
        
        return "";
    }
}

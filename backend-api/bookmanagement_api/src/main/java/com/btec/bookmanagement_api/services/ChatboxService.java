package com.btec.bookmanagement_api.services;

import com.btec.bookmanagement_api.entities.Book;
import com.btec.bookmanagement_api.entities.Category;
import com.btec.bookmanagement_api.entities.Chapter;
import com.btec.bookmanagement_api.entities.User;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ChatboxService {

    private final OpenAiService openAiService;
    private final BookService bookService;
    private final FollowBookService followBookService;
    private final ChapterService chapterService;

    // ‚úÖ 1. G·ª£i √Ω truy·ªán b·∫±ng AI d·ª±a theo ng∆∞·ªùi d√πng
    public String recommendBookByAI(User user, String userInput) {
        String prompt = buildPersonalizedPrompt(userInput);
        return openAiService.getRecommendation(prompt);
    }

    // ‚úÖ 2. T√≥m t·∫Øt truy·ªán
    public String summarizeBook(Book book) {
        String prompt = "H√£y t√≥m t·∫Øt truy·ªán c√≥ ti√™u ƒë·ªÅ \"" + book.getTitle() +
                "\" v·ªõi m√¥ t·∫£: " + book.getDescription();
        return openAiService.getRecommendation(prompt);
    }

    // ‚úÖ 3. Chat h·ªèi AI t·ªïng qu√°t
    public String chatWithAI(User user, String message) {
        String prompt = "B·∫°n l√† m·ªôt AI h·ªó tr·ª£ ng∆∞·ªùi ƒë·ªçc truy·ªán. Ng∆∞·ªùi d√πng h·ªèi: " + message;
        return openAiService.getRecommendation(prompt);
    }

    // üîß H√†m ph·ª• tr·ª£ ƒë·ªÉ t·∫°o prompt c√° nh√¢n h√≥a t·ª´ danh s√°ch truy·ªán

    private String buildPersonalizedPrompt(String userInput) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("B·∫°n l√† m·ªôt AI tr·ª£ l√Ω ƒë·ªçc truy·ªán, c√≥ nhi·ªám v·ª• gi√∫p ng∆∞·ªùi d√πng t√¨m truy·ªán ph√π h·ª£p.\n");
        prompt.append("Ph√¢n t√≠ch d·ªØ li·ªáu c√°c truy·ªán d∆∞·ªõi ƒë√¢y v√† ƒë∆∞a ra g·ª£i √Ω ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu ng∆∞·ªùi d√πng.\n\n");
        List<Book> allBooks = bookService.getAllBooks();

        prompt.append("D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c truy·ªán hi·ªán c√≥:\n");

        for (Book book : allBooks) {
            String title = book.getTitle();
            String author = book.getAuthor();
            String description = book.getDescription();
            List<Category> categories = book.getCategories();
            int views = book.getViews();
            long followers = followBookService.countFollowersByBookId(book.getId());
            double rating = book.getAverageRating();

            // ƒê·∫øm s·ªë ch∆∞∆°ng theo bookId
            int chapterCount = countChaptersByBookId(book.getId());

            prompt.append("üìö T√™n truy·ªán: ").append(title).append("\n");
            if (author != null) {
                prompt.append("‚úçÔ∏è T√°c gi·∫£: ").append(author).append("\n");
            }

            if (categories != null && !categories.isEmpty()) {
                prompt.append("üè∑Ô∏è Th·ªÉ lo·∫°i: ");
                for (int i = 0; i < categories.size(); i++) {
                    prompt.append(categories.get(i).getName());
                    if (i < categories.size() - 1) prompt.append(", ");
                }
                prompt.append("\n");
            }

            if (description != null && !description.isBlank()) {
                prompt.append("üìñ M√¥ t·∫£: ").append(description).append("\n");
            }

            prompt.append("üëÄ L∆∞·ª£t xem: ").append(views).append("\n");
            prompt.append("‚≠ê ƒê√°nh gi√° trung b√¨nh: ").append(String.format("%.1f", rating)).append(" / 5.0\n");
            prompt.append("üë• Ng∆∞·ªùi theo d√µi: ").append(followers).append("\n");
            prompt.append("üìÑ S·ªë ch∆∞∆°ng: ").append(chapterCount).append("\n\n");
        }

        prompt.append("Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng: ").append(userInput).append("\n");
        prompt.append("‚Üí H√£y g·ª£i √Ω nh·ªØng truy·ªán ph√π h·ª£p t·ª´ danh s√°ch tr√™n v√† gi·∫£i th√≠ch l√Ω do l·ª±a ch·ªçn.");

        return prompt.toString();
    }
    private int countChaptersByBookId(String bookId) {
        // Gi·∫£ s·ª≠ b·∫°n c√≥ ChapterService
        List<Chapter> chapters = chapterService.findByBookId(bookId);
        return chapters != null ? chapters.size() : 0;
    }
    
}

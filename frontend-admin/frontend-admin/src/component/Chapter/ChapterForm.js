import React, { useState, useEffect } from 'react';
import bookService from '../../service/bookService';

const ChapterForm = ({ form, setForm, handleSubmit, closeForm, isEditing }) => {
    const [books, setBooks] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [uploadType, setUploadType] = useState('url'); // 'url' ho·∫∑c 'file'
    const [selectedFiles, setSelectedFiles] = useState([]);
    const [previewUrls, setPreviewUrls] = useState([]);

    useEffect(() => {
        fetchBooks();
    }, []);

    useEffect(() => {
        // X√≥a preview URLs khi component unmount
        return () => {
            previewUrls.forEach(url => URL.revokeObjectURL(url));
        };
    }, [previewUrls]);

    const fetchBooks = async () => {
        try {
            setLoading(true);
            const data = await bookService.getAllBooks();
            setBooks(data);
            setError(null);
        } catch (err) {
            setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s√°ch");
            console.error("Error fetching books:", err);
        } finally {
            setLoading(false);
        }
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setForm(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleFileChange = (e) => {
        const files = Array.from(e.target.files);
        
        if (files.length === 0) return;
        
        // T·∫°o preview URLs cho c√°c files ƒë√£ ch·ªçn
        const newPreviewUrls = files.map(file => URL.createObjectURL(file));
        
        setSelectedFiles(files);
        setPreviewUrls(prevUrls => {
            // X√≥a c√°c URL c≈© ƒë·ªÉ tr√°nh memory leak
            prevUrls.forEach(url => URL.revokeObjectURL(url));
            return newPreviewUrls;
        });
    };

    const renderImageInput = () => {
        if (uploadType === 'url') {
            return (
                <div className="form-group">
                    <label htmlFor="images">H√¨nh ·∫£nh (URL, ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y):</label>
                    <input
                        type="text"
                        id="images"
                        name="images"
                        value={form.images ? form.images.join(', ') : ''}
                        onChange={(e) => {
                            const imageUrls = e.target.value.split(',').map(url => url.trim());
                            setForm(prev => ({
                                ...prev,
                                images: imageUrls.filter(url => url !== '')
                            }));
                        }}
                        placeholder="Nh·∫≠p URL h√¨nh ·∫£nh, ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y"
                    />
                </div>
            );
        } else {
            return (
                <div className="form-group">
                    <label htmlFor="fileImages">T·∫£i l√™n h√¨nh ·∫£nh:</label>
                    <input
                        type="file"
                        id="fileImages"
                        accept="image/*"
                        multiple
                        onChange={handleFileChange}
                        className="file-input"
                    />
                    {previewUrls.length > 0 && (
                        <div className="image-previews">
                            {previewUrls.map((url, index) => (
                                <div key={index} className="image-preview">
                                    <img src={url} alt={`Preview ${index}`} />
                                    <button 
                                        type="button" 
                                        className="remove-image"
                                        onClick={() => {
                                            setPreviewUrls(prevUrls => {
                                                const newUrls = [...prevUrls];
                                                URL.revokeObjectURL(newUrls[index]);
                                                newUrls.splice(index, 1);
                                                return newUrls;
                                            });
                                            setSelectedFiles(prevFiles => {
                                                const newFiles = [...prevFiles];
                                                newFiles.splice(index, 1);
                                                return newFiles;
                                            });
                                        }}
                                    >
                                        &times;
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            );
        }
    };

    const handleFormSubmit = async (e) => {
        e.preventDefault();
      
        if (!form.bookId) {
          console.error("‚ùå Thi·∫øu bookId");
          return;
        }
      
        try {
          console.log("üöÄ G·ª≠i d·ªØ li·ªáu ch∆∞∆°ng:", form);
      
          await bookService.addChapter(form.bookId, {
            chapterNumber: form.chapterNumber,
            title: form.title,
            content: form.content,
            images: form.images,
          });
      
          console.log("‚úÖ Th√™m ch∆∞∆°ng th√†nh c√¥ng!");
        } catch (error) {
          console.error("‚ùå L·ªói khi th√™m ch∆∞∆°ng:", error.response?.data || error.message);
        }
      };
      
    

    return (
        <div className="form-overlay">
            <div className="form-container">
                <h3>{isEditing ? 'Ch·ªânh s·ª≠a ch∆∞∆°ng' : 'Th√™m ch∆∞∆°ng m·ªõi'}</h3>
                <form onSubmit={handleFormSubmit}>
                    <div className="form-group">
                        <label htmlFor="bookId">Ch·ªçn s√°ch:</label>
                        <select
                            id="bookId"
                            name="bookId"
                            value={form.bookId || ''}
                            onChange={handleChange}
                            required
                            disabled={loading}
                        >
                            <option value="">-- Ch·ªçn s√°ch --</option>
                            {books.map(book => (
                                <option key={book.id} value={book.id}>
                                    {book.title}
                                </option>
                            ))}
                        </select>
                        {loading && <span className="loading-text">ƒêang t·∫£i danh s√°ch s√°ch...</span>}
                        {error && <span className="error-text">{error}</span>}
                    </div>
                    <div className="form-group">
                        <label htmlFor="chapterNumber">S·ªë ch∆∞∆°ng:</label>
                        <input
                            type="number"
                            id="chapterNumber"
                            name="chapterNumber"
                            value={form.chapterNumber || ''}
                            onChange={handleChange}
                            required
                            min="0"
                            step="0.1"
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="title">Ti√™u ƒë·ªÅ:</label>
                        <input
                            type="text"
                            id="title"
                            name="title"
                            value={form.title || ''}
                            onChange={handleChange}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="content">N·ªôi dung:</label>
                        <textarea
                            id="content"
                            name="content"
                            value={form.content || ''}
                            onChange={handleChange}
                            required
                            rows="10"
                        />
                    </div>
                    
                    <div className="form-group">
                        <label>Ph∆∞∆°ng th·ª©c t·∫£i ·∫£nh:</label>
                        <div className="upload-type-options">
                            <label className="radio-label">
                                <input
                                    type="radio"
                                    name="uploadType"
                                    value="url"
                                    checked={uploadType === 'url'}
                                    onChange={() => setUploadType('url')}
                                />
                                T·ª´ URL
                            </label>
                            <label className="radio-label">
                                <input
                                    type="radio"
                                    name="uploadType"
                                    value="file"
                                    checked={uploadType === 'file'}
                                    onChange={() => setUploadType('file')}
                                />
                                T·ª´ m√°y t√≠nh
                            </label>
                        </div>
                    </div>
                    
                    {renderImageInput()}
                    
                    <div className="form-buttons">
                        <button type="submit" className="btn-submit">
                            {isEditing ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
                        </button>
                        <button type="button" className="btn-cancel" onClick={closeForm}>
                            H·ªßy
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default ChapterForm;

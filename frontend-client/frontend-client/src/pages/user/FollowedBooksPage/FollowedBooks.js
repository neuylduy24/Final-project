import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Sidebar from "component/ProfileUser/SideBar/sideBar";
import BookCard from "component/Book/Card/bookDetailCard"; // Import BookCard
import { toast, ToastContainer } from "react-toastify";
import "../ProfileUserPage/ProfileUserPage.scss";

const API_URL = "https://api.it-ebook.io.vn/api/books"; // API l·∫•y chi ti·∫øt s√°ch

const FollowedBooks = () => {
  const [followedBooks, setFollowedBooks] = useState([]); // D·ªØ li·ªáu s√°ch ƒë√£ theo d√µi
  const [loading, setLoading] = useState(true); // Tr·∫°ng th√°i ƒëang t·∫£i
  const [error, setError] = useState(null); // Tr·∫°ng th√°i l·ªói
  const navigate = useNavigate();
  const token = localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage
  const email = localStorage.getItem("email"); // L·∫•y email t·ª´ localStorage

  // H√†m l·∫•y danh s√°ch s√°ch theo d√µi
  useEffect(() => {
    const fetchFollowedBooks = async () => {
      try {
        // Ki·ªÉm tra n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
        if (!email || !token) {
          setLoading(false);
          setError("Please log in to view followed books.");
          return;
        }

        // G·ª≠i y√™u c·∫ßu API ƒë·ªÉ l·∫•y s√°ch ƒë√£ theo d√µi
        const response = await axios.get(
          `https://api.it-ebook.io.vn/api/follow-books/user/${email}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );

        if (response.status === 200 && Array.isArray(response.data)) {
          if (response.data.length === 0) {
            setFollowedBooks([]); // Kh√¥ng c√≥ s√°ch n√†o ƒë∆∞·ª£c theo d√µi
            setLoading(false);
            return;
          }

          const uniqueBookIds = Array.from(
            new Set(response.data.map((book) => book.bookId))
          );

          // L·∫•y chi ti·∫øt c√°c s√°ch theo ID s√°ch
          const booksData = await Promise.all(
            uniqueBookIds.map(async (bookId) => {
              try {
                const bookResponse = await axios.get(`${API_URL}/${bookId}`);
                return bookResponse.data;
              } catch (error) {
                console.error(`L·ªói l·∫•y d·ªØ li·ªáu s√°ch ID ${bookId}:`, error);
                return null;
              }
            })
          );

          const filteredBooks = booksData.filter((book) => book !== null);
          setFollowedBooks(filteredBooks); // C·∫≠p nh·∫≠t s√°ch ƒë√£ theo d√µi
          setError(null);
        } else {
          throw new Error(`API tr·∫£ v·ªÅ l·ªói: ${response.status}`);
        }
      } catch (error) {
        if (error.response?.status === 404) {
          // N·∫øu kh√¥ng c√≥ s√°ch n√†o ƒë∆∞·ª£c theo d√µi
          setFollowedBooks([]);
        } else {
          const errorMessage = error.response?.data?.message || error.message;
          toast.error(
            `Error getting followed books list: ${errorMessage}`
          );
          setError(errorMessage);
        }
      } finally {
        setLoading(false);
      }
    };

    fetchFollowedBooks();
  }, [email, token]);

  return (
    <div className="profile-page">
      <Sidebar />
      <div className="profile-content">
        <ToastContainer position="top-right" autoClose={1500} />
        <h2>Followed Books</h2>

        {loading ? (
          <p>Loading followed books...</p>
        ) : error ? (
          <p className="error-message">{error}</p>
        ) : followedBooks.length > 0 ? (
          <div className="book-list">
            {followedBooks.map((book) => (
              <BookCard key={book.id} book={book} />
            ))}
          </div>
        ) : (
          <p>You haven't followed any books yet! üìö</p>
        )}
      </div>
    </div>
  );
};

export default FollowedBooks;
